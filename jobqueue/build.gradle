import java.util.regex.Pattern

apply plugin: 'com.android.library'

Properties releaseConfig = new Properties()
releaseConfig.load(new FileInputStream("${projectDir}/releaseConfig.properties"))
ext.releaseConfig = releaseConfig
task wrapper(type: Wrapper) {
    gradleVersion = '1.12'
}

apply plugin: 'maven'
apply plugin: 'signing'

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:1.2.0-beta2'
        classpath 'org.robolectric:robolectric-gradle-plugin:1.0.1'
    }
}

repositories {
    mavenCentral()
    jcenter()
}

configurations {
    archives {
        extendsFrom configurations.default
    }
}

apply plugin: 'org.robolectric'

dependencies {
    testCompile 'junit:junit:4.12'
    testCompile 'org.robolectric:robolectric:2.4'
    testCompile 'org.hamcrest:hamcrest-core:1.3'
    testCompile 'org.easytesting:fest-util:1.2.5'
    testCompile 'org.easytesting:fest-reflect:1.4.1'

}



android {
    compileSdkVersion 22
    buildToolsVersion "22"
}

//READ VERSION NAME
def manifestFile = file("${projectDir}/src/main/AndroidManifest.xml")
def pattern = Pattern.compile("versionName=\"([\\d\\.\\w\\-]+)\"")
def manifestText = manifestFile.getText()
def matcher = pattern.matcher(manifestText)
matcher.find()
def manifestVersionName = matcher.group(1)
println "version name:${manifestVersionName}"

//create jar tasks
android.libraryVariants.all { variant ->
    def name = variant.buildType.name
    println "checking variant ${name}"
    if (name.equals(com.android.builder.core.BuilderConstants.DEBUG)) {
        return; // Skip debug builds.
    }
    def suffix = name.capitalize()
    println "found release variant"
    def jarTask = project.tasks.create(name: "jar${suffix}", type: Jar){
        dependsOn variant.javaCompile
        from variant.javaCompile.destinationDir
        from 'LICENSE.txt'
    }
    def javadocTask = project.tasks.create(name: "javadoc${suffix}", type: Javadoc) {
        source = variant.javaCompile.source
        ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
        classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar)
    }

    def javadocJarTask = project.tasks.create(name: "javadocJar${suffix}", type: Jar) {
        classifier = 'javadoc'
        from 'build/docs/javadoc'
    }

    def sourcesJarTask = project.tasks.create(name: "sourceJar${suffix}", type: Jar) {
        from android.sourceSets.main.getJava().getSrcDirs()
        classifier = 'sources'
    }
    artifacts.add('archives', jarTask);
    artifacts.add('archives', javadocJarTask);
    artifacts.add('archives', sourcesJarTask);
}
//create jar tasks end

robolectric {
    // Configure max heap size of the test JVM
    maxHeapSize = '2048m'

    // Configure the test JVM arguments - Does not apply to Java 8
    jvmArgs '-XX:MaxPermSize=512m', '-XX:-UseSplitVerifier'

    // Specify max number of processes (default is 1)
    maxParallelForks = 1

    // Specify max number of test classes to execute in a test process
    // before restarting the process (default is unlimited)
    forkEvery = 150

    // configure whether failing tests should fail the build
    ignoreFailures true

    // use afterTest to listen to the test execution results
    afterTest { descriptor, result ->
        println "Executing test for ${descriptor.name} with result: ${result.resultType}"
    }
}


afterEvaluate { project ->
    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment {
                    MavenDeployment deployment -> signing.signPom(deployment)
                }
                println "ossr username: ${releaseConfig.ossrhUsername}"

                pom.artifactId = 'android-priority-jobqueue'


                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots") {
                    authentication(userName: releaseConfig.ossrhUsername, password: releaseConfig.ossrhPassword)
                }

                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2") {
                    authentication(userName: releaseConfig.ossrhUsername, password: releaseConfig.ossrhPassword)
                }

                pom.project {
                    modelVersion '4.0.0'
                    groupId 'com.birbit'
                    artifactId 'android-priority-jobqueue'
                    packaging 'jar'
                    name 'Android Priority Job Queue'
                    version manifestVersionName
                    description 'a Job Queue specifically written for Android to easily schedule jobs (tasks) that run in the background, improving UX and application stability.'
                    url 'https://github.com/yigit/android-priority-jobqueue'

                    parent {
                        groupId 'org.sonatype.oss'
                        artifactId 'oss-parent'
                        version 7
                    }

                    scm {
                        connection 'scm:git:git@github.com:yigit/android-priority-jobqueue.git'
                        developerConnection 'scm:git:git@github.com:yigit/android-priority-jobqueue.git'
                        url 'git@github.com:yigit/android-priority-jobqueue.git'
                    }

                    licenses {
                        license {
                            name 'The MIT License (MIT)'
                            url 'http://opensource.org/licenses/MIT'
                            distribution 'repo'
                        }
                    }

                    developers {
                        developer {
                            id "yigit"
                            name "Yigit Boyar"
                        }
                    }

                    dependencies {
                        dependency {
                            groupId 'com.google.android'
                            artifactId 'android'
                            version '2.2.1'
                        }
                    }
                }
            }
        }
    }

    signing {
        required { gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }
}
