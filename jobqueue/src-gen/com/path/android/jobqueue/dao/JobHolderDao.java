package com.path.android.jobqueue.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

import com.path.android.jobqueue.JobHolder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * DAO for table JOB_HOLDER.
*/
public class JobHolderDao extends AbstractDao<JobHolder, Long> {

    public static final String TABLENAME = "JOB_HOLDER";

    /**
     * Properties of entity JobHolder.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id =new Property(0, Long.class , "id", true, "_id");
        public final static Property Priority =new Property(1, Integer.class , "priority", false, "PRIORITY");
        public final static Property RunCount =new Property(2, Integer.class , "runCount", false, "RUN_COUNT");
        public final static Property __baseJob =new Property(3, byte[].class , "__baseJob", false, "__BASE_JOB");
        public final static Property Created =new Property(4, java.util.Date.class , "created", false, "CREATED");
        public final static Property RunningSessionId =new Property(5, Long.class , "runningSessionId", false, "RUNNING_SESSION_ID");
    };


    public JobHolderDao(DaoConfig config) {
        super(config);
    }

    public JobHolderDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'JOB_HOLDER' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'PRIORITY' INTEGER," + // 1: priority
                "'RUN_COUNT' INTEGER," + // 2: runCount
                "'__BASE_JOB' BLOB," + // 3: __baseJob
                "'CREATED' INTEGER," + // 4: created
                "'RUNNING_SESSION_ID' INTEGER);"); // 5: runningSessionId
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_JOB_HOLDER_PRIORITY ON JOB_HOLDER" +
                " (PRIORITY);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'JOB_HOLDER'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, JobHolder entity) {
        stmt.clearBindings();
        entity.onBeforeSave();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);

        }
 
        Integer priority = entity.getPriority();
        if (priority != null) {
            stmt.bindLong(2, priority);

        }
 
        Integer runCount = entity.getRunCount();
        if (runCount != null) {
            stmt.bindLong(3, runCount);

        }
 
        byte[] __baseJob = entity.get__baseJob();
        if (__baseJob != null) {
            stmt.bindBlob(4, __baseJob);

        }
 
        java.util.Date created = entity.getCreated();
        if (created != null) {
            stmt.bindLong(5, created.getTime());

        }
 
        Long runningSessionId = entity.getRunningSessionId();
        if (runningSessionId != null) {
            stmt.bindLong(6, runningSessionId);

        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /** @inheritdoc */
    @Override
    public JobHolder readEntity(Cursor cursor, int offset) {
        JobHolder entity = new JobHolder( //

            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0) , // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1) , // priority
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2) , // runCount
            cursor.isNull(offset + 3) ? null : cursor.getBlob(offset + 3) , // __baseJob
            cursor.isNull(offset + 4) ? null : new java.util.Date( cursor.getLong(offset + 4) ) , // created
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5) // runningSessionId
        );
        return entity;
    }

    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, JobHolder entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0) );
        entity.setPriority(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1) );
        entity.setRunCount(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2) );
        entity.set__baseJob(cursor.isNull(offset + 3) ? null : cursor.getBlob(offset + 3) );
        entity.setCreated(cursor.isNull(offset + 4) ? null : new java.util.Date( cursor.getLong(offset + 4) ) );
        entity.setRunningSessionId(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5) );
     }

    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(JobHolder entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    /** @inheritdoc */
    @Override
    public Long getKey(JobHolder entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
